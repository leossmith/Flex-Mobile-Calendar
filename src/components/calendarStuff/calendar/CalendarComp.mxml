<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" initialize="group1_initializeHandler(event)"
		 creationComplete="initView(event)">
	
	<fx:Metadata>
		[Event(name="dateSelectedEvent", type="events.RefreshEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import classes.ReturnMonthName;
			
			import events.RefreshEvent;
			
			private var fisrtDayStr:int;
			private var lastDayStr:int;
			public var thisMonth:int;
			private var thisYear:int;
			[Bindable]
			private var monthLabelString:String;
			private var currentYear:int;
			private var currentMonth:int;
			private var currentDay:int;
			private var maxItems:int = 35;
			
			private var getMonthClass:ReturnMonthName = new ReturnMonthName;
			private var arrMonthCal:ArrayCollection = new ArrayCollection;
			private var arrMonthCal1:ArrayCollection = new ArrayCollection;
			private var arrThisMonth:ArrayCollection = new ArrayCollection;
			
			public var endDates:mx.collections.ArrayList;
			public var minimumDate:Date;
			[Bindable]
			public var top_color:Number;
			private var currentDate:Date;
			private var currentDayNum:int;
			private var currentDayStr:int;
			
			
			
			protected function initView(event:FlexEvent):void {
				/*if(minimumDate==null){
					var currentDate:Date = new Date();
				} else {
					var currentDate:Date = minimumDate;
				}
				trace(currentDate + "lopip");
					
				var currentDayNum:int = currentDate.date;
				var currentDayStr:int = currentDate.day;
				currentDay = currentDayNum;
				currentMonth = thisMonth = currentDate.month;
				currentYear = thisYear = currentDate.fullYear;*/
				setMinimumDate(minimumDate);
				
				for (var i:int = currentDayNum; i > 1; i--) {
					currentDayStr--;
					if (currentDayStr < 0) {
						currentDayStr = 6;
					}
				}
				fisrtDayStr = currentDayStr;
				addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);	
				/*db = File.applicationStorageDirectory.resolvePath("Tourismart.db");
				conn = new SQLConnection();
				conn.addEventListener(SQLEvent.OPEN, openDatabaseHandler);
				conn.openAsync(db);*/
				changeMonthLabel(thisMonth, thisYear);
			}
			
			public function setMinimumDate(minimumDate:Date){
				if(minimumDate==null){
					currentDate = new Date();
				} else {
					currentDate = minimumDate;
				}
				
				currentDayNum = currentDate.date;
				currentDayStr = currentDate.day;
				currentDay = currentDayNum;
				currentMonth = thisMonth = currentDate.month;
				currentYear = thisYear = currentDate.fullYear;
			}
			
			protected function onSwipe(event:TransformGestureEvent):void {
				if (event.offsetX == -1) {
					goNext();
					
				} 
				else if (event.offsetX == 1) {
					goPrevious();
				}
			}
				
			protected function goToPreviousMonth(event:MouseEvent):void {
				goPrevious();
			}
			
			private function goPrevious():void {
				thisMonth--;
				if (thisMonth < 0) {
					thisMonth = 11;
					thisYear--;
				}
				groupLayout.removeAllElements();
				
				var lastDay:int;
				if (fisrtDayStr - 1 >= 0) {
					lastDay = fisrtDayStr - 1;
				}
				else {	
					lastDay = 6;
				}
				changeMonthLabel(thisMonth, thisYear);
				changePreviousCalendar(lastDay, thisMonth, thisYear);
			}
			
			protected function goToNextMonth(event:MouseEvent):void {
				goNext();
			}
			
			private function goNext():void {
				thisMonth++;
				if (thisMonth > 11) {
					thisMonth = 0;
					thisYear++;
				}
				if(lastDayStr<6){
					fisrtDayStr = lastDayStr +1;
				} else {
					fisrtDayStr = 0;
				}
				groupLayout.removeAllElements();
				changeMonthLabel(thisMonth, thisYear);
				changeCurrentNextCalendar(fisrtDayStr, thisMonth, thisYear);
			}
	
			protected function changePreviousCalendar(lastDay:int, month:int, year:int):void {
				var currentDayNum:int = getDayCount(year, month+1);
				var currentDayStr:int = lastDay;
				for (var i:int = currentDayNum; i > 1; i--) {
					currentDayStr--;
					if (currentDayStr < 0) {
						currentDayStr = 6;
					}
				}
				fisrtDayStr = currentDayStr;
				
				changeCurrentNextCalendar(fisrtDayStr, month, year);
			}
			
		/*	public function lol():void{
				myStatement = new SQLStatement();
				myStatement.sqlConnection = conn;
				myStatement.addEventListener(SQLEvent.RESULT, distinctFromBookingResults);				
				myQuery = "SELECT DISTINCT start_date FROM booking";
				myStatement.text = myQuery;
				myStatement.execute();
				
			}*/
			
			
			public function changeCurrentNextCalendar(firstDay:int, month:int, year:int):void {
				arrThisMonth.removeAll();
				var previousMonthMaxDays:int = getDayCount(year, month);
				previousMonthMaxDays = previousMonthMaxDays - (firstDay - 1);
				var isAdded:Boolean = false;
				arrMonthCal.removeAll();
				arrMonthCal1.removeAll();
				groupLayout.removeAllElements();
				thisMonth=month;
				if(endDates!=null){
					for (var o:int = 0; o < endDates.length; o++) {
						if(endDates.getItemAt(o).checked_out!="1"){
							var startDate:String = String(endDates.getItemAt(o).start_date);
							if (int(startDate.substr(5,2))-1 == month && int(startDate.substr(0,4)) == year) {
								arrMonthCal1.addItem({day:int(startDate.substr(8,2))});
							}
						}
					}
					//}
					//if(endDates!=null){
					for (var o:int = 0; o < endDates.length; o++) {
						if(endDates.getItemAt(o).checked_out!="1"){
							var arrDate:String = String(endDates.getItemAt(o).end_date);
							if (int(arrDate.substr(5,2))-1 == month && int(arrDate.substr(0,4)) == year) {
								arrMonthCal.addItem({day:int(arrDate.substr(8,2))});
							}
						}
					}
				}
				/*if (firstDay == 0) {
					firstDay = 7;
					previousMonthMaxDays = previousMonthMaxDays - (firstDay);
				}*/
				for (var j:int = 0; j < firstDay; j++) {
					//var previousDayLab:Label = new Label;
					//previousDayLab.text = previousMonthMaxDays + "";
					//previousDayLab.styleName = "calendarPreviousMonthDay";
					var previousDayLab:DateComp = new DateComp;
					previousDayLab.year = thisYear;
					previousDayLab.month = thisMonth;
					previousDayLab.day = previousMonthMaxDays + "";
					previousDayLab.datePart.visible = false;
					previousDayLab.width = tileLayout.columnWidth;
					previousDayLab.height = tileLayout.rowHeight;
					previousDayLab.el.visible = false;
					groupLayout.addElement(previousDayLab);
					previousMonthMaxDays++;
				}
				for (var k:int = 1; k <= getDayCount(year, month + 1); k++) {
					var thisDateComp:DateComp = new DateComp;
					thisDateComp.addEventListener("daySelectedEvent", dateSelected);
					thisDateComp.year = thisYear;
					thisDateComp.month = thisMonth;
					thisDateComp.day = k + "";
					if ((new Date).getFullYear() == year && (new Date).getMonth() == month && (new Date).getDate() ==  k) {
						thisDateComp.style = "calendarThisMonthDayCurrent";
						thisDateComp.label1.setStyle('color',top_color);
						thisDateComp.isCurrent = true;
					}
					else {
						thisDateComp.style = "calendarThisMonthDay";
						thisDateComp.isCurrent = false;
					}
					thisDateComp.width = tileLayout.columnWidth;
					thisDateComp.height = tileLayout.rowHeight;
					if((currentDay>k && currentYear >= year && currentMonth >= month) || (currentYear >= year && currentMonth > month) || (currentYear > year)){
						thisDateComp.label1.setStyle('color','0x000000');
						thisDateComp.enabled = false;
					}
					arrThisMonth.addItem(thisDateComp);
					groupLayout.addElement(thisDateComp);
					if (k == getDayCount(year, month + 1)) {
						lastDayStr = getDayString(year, month, k);
					}
					isAdded = false;
					if((currentYear >= year && currentMonth >= month) ||(currentYear >= year && currentMonth > month) || (currentYear > year)){
						back_button.visible = false;
					} else {
						back_button.visible = true;
					}
				}
				var nextMonthDays:int = (firstDay - 1) + getDayCount(year, month + 1);
				/*for (var l:int = 1; l < (maxItems - nextMonthDays); l++) {
					//var nextDayLab:Label = new Label;
					//nextDayLab.text = l + "";
					//nextDayLab.styleName = "calendarPreviousMonthDay";
					var nextDayLab:DateComp = new DateComp;
					nextDayLab.year = thisYear;
					nextDayLab.month = thisMonth;
					nextDayLab.day = l + "";
					nextDayLab.width = tileLayout.columnWidth;
					nextDayLab.height = tileLayout.rowHeight;
					nextDayLab.el.visible = false;
					nextDayLab.ellipse.visible = false;
					nextDayLab.ellipse1.visible = false;
					groupLayout.addElement(nextDayLab);
				}*/
			}
			
			protected function getDayCount(year:int, month:int):int{
				var d:Date = new Date(year, month, 0);
				return d.getDate();
			}
			
			protected function getDayString(year:int, month:int, day:int):int{
				var d:Date = new Date(year, month, day);
				return d.getDay();
			}
			
			protected function dateSelected(e:RefreshEvent):void {
				dispatchEvent(new RefreshEvent('dateSelectedEvent', e.data));
				for (var i:int = 0; i < arrThisMonth.length; i++) {
					if (arrThisMonth.getItemAt(i).day != e.data.day) {
						arrThisMonth.getItemAt(i).el.visible = false;
						if (arrThisMonth.getItemAt(i).year == currentYear && arrThisMonth.getItemAt(i).month == currentMonth && arrThisMonth.getItemAt(i).day ==  currentDay) {
							arrThisMonth.getItemAt(i).style = "calendarThisMonthDayCurrent";
							if ((new Date).getFullYear() == arrThisMonth.getItemAt(i).year && (new Date).getMonth() == arrThisMonth.getItemAt(i).month && (new Date).getDate() ==  arrThisMonth.getItemAt(i).day) {
								arrThisMonth.getItemAt(i).label1.setStyle('color',top_color);
							} else {
								arrThisMonth.getItemAt(i).label1.setStyle('color',0x000000);
							}
						}
						else {
							arrThisMonth.getItemAt(i).style = "calendarThisMonthDay";
							arrThisMonth.getItemAt(i).label1.setStyle('color',0x000000);
						}
					}
					else {
						/*if (arrThisMonth.getItemAt(i).year == currentYear && arrThisMonth.getItemAt(i).month == currentMonth && arrThisMonth.getItemAt(i).day ==  currentDay) {
							
							arrThisMonth.getItemAt(i).label1.setStyle('color',top_color);
							
						}
						else {
							arrThisMonth.getItemAt(i).label1.setStyle("color",0xFFFFFF);
							arrThisMonth.getItemAt(i).label1.setStyle("fontWeight","bold");
						}*/
						arrThisMonth.getItemAt(i).style = "calendarSelectedDay";
						arrThisMonth.getItemAt(i).label1.setStyle('color',0xFFFFFF);
						arrThisMonth.getItemAt(i).el.visible = true;
						var cur:SolidColor = new SolidColor;
						cur.color=top_color;
						arrThisMonth.getItemAt(i).el.fill=cur;
					}
				}
				
			}
			
			public function changeMonthLabel(month:int, year:int):void {
				monthLabelString = getMonthClass.getMonthName(month) + " " + year;
			}
			
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var myColorTransform = new ColorTransform();
				myColorTransform.color = 0x6b6b6b;
				leftBtn.transform.colorTransform = myColorTransform;
				rightBtn.transform.colorTransform = myColorTransform;
			}
			
		]]>
	</fx:Script>	
	
	   <s:Group width="100%" id="monthName">
		   <s:Rect width="100%" height="100%" id="topRect">
			   <s:fill>
				   <s:SolidColor color="#FFFFFF"/>
			   </s:fill>
		   </s:Rect>
		   <s:HGroup width="100%" height="100%" gap="0" verticalAlign="middle" horizontalAlign="center" paddingBottom="20" paddingTop="20">
			   <s:HGroup height="100%" width="22%" click="goToPreviousMonth(event)" id="back_button" visible="false"  verticalAlign="middle">
				   <s:Spacer width="16%"/>
				   <s:Image height="50%" id="leftBtn"  smooth="true" smoothingQuality="high" scaleMode="letterbox" verticalCenter="0" horizontalAlign="left" >
					   <s:source>
						   <s:MultiDPIBitmapSource source160dpi="@Embed('/assets/lowRes/back.png')"
												   source240dpi="@Embed('/assets/medRes/backIcon.png')"
												   source320dpi="@Embed('/assets/highRes/backIcon.png')"
												   source480dpi="@Embed('/assets/hdRes/back.png')"/>
					   </s:source>
				   </s:Image>
			   </s:HGroup>
			   
			   <s:Label text="{monthLabelString}" textAlign="center" width="56%" styleName="calendarMonthComponent" color="0x000000"/>
			   <s:HGroup height="100%" width="22%" click="goToNextMonth(event)" verticalAlign="middle" horizontalAlign="right">
				   <s:Image height="50%" id="rightBtn" smooth="true" smoothingQuality="high" scaleMode="letterbox">
					   <s:source>
						   <s:MultiDPIBitmapSource source160dpi="@Embed('/assets/lowRes/next.png')"
												   source240dpi="@Embed('/assets/medRes/next_icon.png')"
												   source320dpi="@Embed('/assets/highRes/next_icon.png')"
												   source480dpi="@Embed('/assets/hdRes/next.png')"/>
					   </s:source>
				   </s:Image>
				   <s:Spacer width="14%"/>
			   </s:HGroup>
		   </s:HGroup>
	   </s:Group>
	
		<s:Group width="100%" top="{monthName.height}">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Rect>
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="0">
				
			<s:HGroup width="100%" height="10%" gap="1" verticalAlign="middle" horizontalAlign="center"  paddingBottom="25" paddingTop="25">
				<s:Label id="lol" text="{resourceManager.getString('resources','CALENDAR_SUNDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_MONDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_TUESDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_WEDNESDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_THURSDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_FRIDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
				<s:Label text="{resourceManager.getString('resources','CALENDAR_SATURDAY')}" textAlign="center" width="{this.width * .14}" styleName="calendarDayComponent"/>
			</s:HGroup>
			
			<s:Group id="groupLayout">
				<s:layout>
					<s:TileLayout id="tileLayout" columnWidth="{this.width * .14}" rowHeight="{this.height * .12}" verticalGap="0" horizontalGap="1" verticalAlign="middle" horizontalAlign="center" orientation="rows"  requestedColumnCount="7"/>
				</s:layout>	
			</s:Group>
			</s:VGroup>
		</s:Group>
</s:Group>
